#############################################
Author      = "Gilad Amar"                  #
Email       = "giladamar@gmail.com"         #
Created     = "28/06/2016"                  #
#############################################
/* 
  WELCOME TO THE REGEX INTRODUCTORY CODE.
*/
/*  Warning: the following pseudo-code will make you cry
    A safety pig has been provided for your benefit:
 _._ _..._ .-',     _.._(`))
'-. `     '  /-._.-'    ',/
   )         \            '.
  / _    _    |             \
 |  a    a    /              |
 \   .-.                     ;  
  '-('' ).-'       ,'       ;
     '-;           |      .'
        \           \    /
        | 7  .__  _.-\   \
        | |  |  ``/  /`  /
       /,_|  |   /,_/   /
          /,_/      '`-'
*/
/* 
          TODO
          Regex in python std.
          Regex in Pandas
          Regex in bash
          Test regex at https://regex101.com/


          \b(0?[1-9]|[12]\d|3[01])([\/\-])(0?[1-9]|1[012])\2(\d{4})
          The only new concept here is that we're using \2 to match the second capture group, which is the divider (/ or -).

          "\b(?:19|20)\d{2}\b" - match all years between 1900 and 2099


        is email?
          (?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])

        #find urls:
          (https?:\/\/)(www\.)?(?<domain>[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})(?<path>\/[-a-zA-Z0-9@:%_\/+.~#?&=]*)?

        # replace date formats
          import re
          regex = r'\b(0?[1-9]|[12]\d|3[01])([ \/\-])(0?[1-9]|1[012])\2(\d{4})'
          test_str = "Today's date is 18/09/2017"
          subst = r'\3\2\1\2\4'
          result = re.sub(regex, subst, test_str)
          print(result)


        #named capture groups
          import re
          import urllib.request

          html = str(urllib.request.urlopen("https://moz.com/top500").read())
          regex = r"(https?:\/\/)(www\.)?(?P<domain>[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6})(?P<path>\/[-a-zA-Z0-9@:%_\/+.~#?&=]*)?"
          matches = re.finditer(regex, html)

          for match in matches:
            print(match.group('domain'))



        #make the next sequence case-insensitive
        (?i) - Signifies that the next sequence is case-insensitive.
          +----------------------------+
          |Symbol|    Description      |
          +------+---------------------+
          | ?=   | Positive Lookahead  |
          | ?!   | Negative Lookahead  |
          | ?<=  | Positive Lookbehind |
          | ?<!  | Negative Lookbehind |
          +----------------------------+
          * look behind/aheads in parenthesis is not returned

          +--------+--------+
          | Greedy |  Lazy  |
          +--------+--------+
          | *      | *?     |
          | +      | +?     |
          | ?      | ??     |
          | {n}    | {n}?   |
          | {n,}   | {n,}?  |
          | {n,m}  | {n,m}? |
          +--------+--------+
        Add a ? to a quantifier to make it ungreedy i.e lazy.
        Example:
          test string: stackoverflow
            greedy : s.*o  -> stackoverflo
            lazy   : s.*?o -> stacko
        */

case sensitive


\d:       digits 0-9
\D:       non-digit
.:        single wildcard; so to match period use escape \.
[abc]:    single wildcard of specified list in []
[A-Za-z]: single wildcard in whole char range
[3-9]:    ""

[^abc]: single wildcard NOT in list [^ ]
\w:     metacharacter which is equivalent to the character range [A-Za-z0-9_] and often used to match characters in English text.
\W:     non-alphanumeric (eg. punctuation) and underscore equivalent to [a-zA-Z0-9_]

a{3}:     makes 3 repetitions of a
a{1-3}:   some engines allow a specified range of repetitions
[wxy]{5}: five characters of either wxy
.{2,6}:   any two to six characters

c*:     0 or more c's
c+:     one or more c's
\d+:    one or more digit
[abc]+: one or more of a, b or c.
ab?c:   b is optional, may or may not be there
special characters dont have meaning inside of a set e.g. [*+] means where it matches * or +

.:    matches anything except a newline
' ':  space
\t:   tab
\n:   newline
\r:   carriage return
\b:   boundary between word and non word
\B:   not word boundary (e.g. never at the end of a sentence)
\s:   matches ALL space types
\S:   non-whitespace


^_________$:  whole line must match exactly this ^ is the start and $ is the end

(___)..... :  whole string is matched but only part in () is returned 
(___(....)):  can capture multiple, even nested items

(cat|dog):    the OR operator

...............................................................................
                    INCOMPLETE SECTION BELOW, COPY PASTED.
...............................................................................


The solution is to use Python’s raw string notation for regular expressions; backslashes are not handled in any special way in a string literal prefixed with 'r', so r"\n" is a two-character string containing '\' and 'n', while "\n" is a one-character string containing a newline. Regular expressions will often be written in Python code using this raw string notation.
Import re
re.match(pattern, string):

This method finds match if it occurs at start of the string. For example, calling match() on the string ‘AV Analytics AV’ and looking for a pattern ‘AV’ will match. However, if we look for only Analytics, the pattern will not match. Let’s perform it in python now.


re.search(pattern, string):

It is similar to match() but it doesn’t restrict us to find matches at the beginning of the string only. Unlike previous method, here searching for pattern ‘Analytics’ will return a match.


re.findall (pattern, string):
 **re.finditer(pattern, string)
It helps to get a list of all matching patterns. It has no constraints of searching from start or end. If we will use method findall to search ‘AV’ in given string it will return both occurrence of AV. While searching a string, I would recommend you to use re.findall() always, it can work like re.search() and re.match() both.


re.split(pattern, string, [maxsplit=0]):

This methods helps to split string by the occurrences of given pattern.



re.sub(pattern, repl, string):

It helps to search a pattern and replace with a new sub string. If the pattern is not found, string is returned unchanged.


re.compile(pattern, repl, string):

We can combine a regular expression pattern into pattern objects, which can be used for pattern matching. It also helps to search a pattern again without rewriting it.


For speed compile the expression:
    reobj = re.compile (r"[0-9]+")
    for line in myfile:
        m = reobj.match(line)
        if m:
            print(m.string[m.start():m.end()])