IPP/TBB/MKL
	https://dynamicinstaller.intel.com/system-studio/
	select
		ipp
		tbb
		mkl
		remove eclipse IDE
		sign-in/signup
		

ffmpeg 
	sudo apt-get install libunistring-dev

	sudo PATH="$HOME/bin:$PATH" PKG_CONFIG_PATH="$HOME/ffmpeg_build/lib/pkgconfig" ./configure \
	  --prefix="$HOME/ffmpeg_build" \
	  --pkg-config-flags="--static" \
	  --extra-cflags="-I$HOME/ffmpeg_build/include" \
	  --extra-ldflags="-L$HOME/ffmpeg_build/lib" \
	  --extra-libs="-lpthread -lm" \
	  --bindir="$HOME/bin" \
	  --enable-gpl \
	  --enable-gnutls \
	  --disable-libaom \
	  --enable-libass \
	  --enable-libfdk-aac \
	  --enable-libfreetype \
	  --enable-libmp3lame \
	  --enable-libvorbis \
	  --enable-libvpx \
	  --enable-libx264 \
	  --enable-libx265 \
	  --enable-nonfree && \
	PATH="$HOME/bin:$PATH" make && \
	make install && \
	hash -remove
 
lapack atlas c/blas
	sudo apt-get install libblas-dev liblapack-dev libatlas-base-dev
	sudo apt-get install libopenblas-dev

openmp
	sudo apt-get install libomp-dev

opengl
	sudo apt-get install libglu1-mesa-dev freeglut3-dev mesa-common-dev

v4l
	sudo apt-get install -y v4l-utils

VTK:
	git clone https://gitlab.kitware.com/vtk/vtk.git
	cd vtk
	mkdir build
	cd build
	cmake-gui ..
		CMAKE_BUILD_TYPE Release
	make -j8
	sudo make-j8 install

Eigen 
	sudo apt-get install libeigen3-dev

mediaSDK
	intel-gmmlib
	intel-media driver

	misc:
		sudo apt-get install googletest libgtest-dev libpciaccess0 libpciaccess-dev
		sudo apt-get install opencl-headers ocl-icd-dev ocl-icd-opencl-dev
		sudo apt-get install libmfx-dev libpciaccess-dev libdrm-dev libva-dev

	libva:
		git clone https://github.com/intel/libva.git
		cd libva
		./autogen.sh
		make
		make install

		meson build
		ninja -C build
		cd build
		sudo ninja install


	git clone https://github.com/Intel-Media-SDK/MediaSDK msdk
	cd msdk
	mkdir build && cd build
	cmake ..
	make -j4
	sudo make install


opencv:
	sudo apt-get install build-essential cmake unzip pkg-config libjpeg-dev libpng-dev libtiff-dev
	sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
	sudo apt-get install libxvidcore-dev libx264-dev

	<incomplete>
	

	Flags:

*
cmake -D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D OPENCV_ENABLE_NONFREE=ON \
-D OPENCV_EXTRA_MODULES_PATH="/mnt/d82771a7-4e90-4fc7-9d0d-a77175d064e3/PycharmProjects/opencv_contrib/modules" \
-D OPENCV_GENERATE_PKGCONFIG=YES \
-D MKL_WITH_OPENMP=ON \
-D MKL_WITH_TBB=ON \
-D WITH_MFX=ON \
-D WITH_OPENMP=ON \
-D WITH_OPENGL=ON \
-D WITH_TBB=ON \
-D WITH_V4L=ON \
-D WITH_CUDA=ON \
-D BUILD_JPEG=ON \
-D BUILD_JAVA=OFF \
-D BUILD_PNG=ON \
-D BUILD_TIFF=ON \
-D CMAKE_C_COMPILER=/usr/bin/gcc-8 \
-D CUDA_ARCH_BIN=5.0 \
-D BUILD_WEBP=ON ..


* can't use gcc >8
* get arch from https://developer.nvidia.com/cuda-gpus


$ nproc
$ make -j8
$ sudo make install

$ sudo /bin/bash -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf'
$ sudo ldconfig
$ add srouce ... to bashrc





* May need this:
	sudo ln -s /usr/bin/gcc-8 /usr/local/cuda/bin/gcc
	sudo ln -s /usr/bin/g++-8 /usr/local/cuda/bin/g++
